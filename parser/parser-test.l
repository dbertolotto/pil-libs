(load "parser.l" "../lib/unit.l")
(symbols '(pico unit parser))

(deftest t-pchar ()
  (check
    (= '(NIL "No more input" . NIL) (pchar "A" '("")))
    (= '(NIL "No more input" . NIL) (pchar "A" '(NIL)))
    (= '(NIL "No more input" . NIL) (pchar "A" NIL))
    (= '(("A") . ("B" "C")) (pchar "A" (chop "ABC")))
    (= '(("Z") . ("B" "C")) (pchar "Z" (chop "ZBC")))
    (= '(NIL "Expecting 'A'. Got 'B'" . ("B" "C" "D")) (pchar "A" (chop "BCD")))
    ))

(deftest t-pchar2 ()
  (let parse-A (pchar2 "A")
    (check
      (= '(NIL "No more input" . NIL) (parse-A '("")))
      (= '(NIL "No more input" . NIL) (parse-A '(NIL)))
      (= '(("A") . ("B" "C")) (parse-A (chop "ABC")))
      (= '(("Z") . ("B" "C")) ((pchar2 "Z") (chop "ZBC")))
      (= '(NIL "Expecting 'A'. Got 'B'" . ("B" "C" "D")) (parse-A (chop "BCD")))
      )))

(deftest t-pchar3 ()
  (let parse-A (pchar3 "A")
    (check
      (isa '+PFail (parse-A '()))
      (= "No more input" (get (parse-A '()) 'Err))
      (isa '+PSuc (parse-A (chop "ABC")))
      (= '"A" (get (parse-A (chop "ABC")) 'Val))
      (= '("B" "C") (get (parse-A (chop "ABC")) 'RestInp))
      (isa '+PFail (parse-A (chop "ZBC")))
      (= "Unexpected 'Z'" (get (parse-A (chop "ZBC")) 'Err))
      (= "Error parsing A\nUnexpected 'Z'" (str> (parse-A (chop "ZBC"))))
      (isa '+PFail (digit (chop "ABC")))
      (= "Unexpected 'A'" (get (digit (chop "ABC")) 'Err))
      (= "Error parsing digit\nUnexpected 'A'" (str> (digit (chop "ABC"))))
      (isa '+PSuc (digit (chop "123")))
      (= '"1" (get (digit (chop "123")) 'Val))
      (= '("2" "3") (get (digit (chop "123")) 'RestInp))
      )))

(deftest t-and-p ()
  (let (parse-A (pchar2 "A")
        parse-B (pchar2 "B")
        parse-A-then-B (and-p 'parse-A 'parse-B))
    (check
      (= '(NIL "No more input" . NIL) (parse-A-then-B '("")))
      (= '(NIL "No more input" . NIL) (parse-A-then-B '(NIL)))
      (= '(("A" "B") . ("C")) (parse-A-then-B (chop "ABC")))
      )))

(deftest t-and-p2 ()
  (let (parse-A (pchar3 "A")
        parse-B (pchar3 "B")
        parse-A-then-B (and-p2 'parse-A 'parse-B)
        ABC (chop "ABC"))
    (check
      (isa '+PFail (parse-A-then-B '()))
      (= "No more input" (get (parse-A-then-B '()) 'Err))
      (isa '+PSuc (parse-A-then-B ABC))
      (= '("A" "B") (get (parse-A-then-B ABC) 'Val))
      (= '("C") (get (parse-A-then-B ABC) 'RestInp))
      )))

(deftest t-or-p ()
  (let (parse-A (pchar2 "A")
        parse-B (pchar2 "B")
        parse-A-else-B (or-p 'parse-A 'parse-B))
    (check
      (= '(("A") . ("Z" "Z")) (parse-A-else-B (chop "AZZ")))
      (= '(("B") . ("Z" "Z")) (parse-A-else-B (chop "BZZ")))
      (= '(NIL "Expecting 'B'. Got 'C'" . ("C" "Z" "Z")) (parse-A-else-B (chop "CZZ")))
      )))

(deftest t-or-p2 ()
  (let (parse-A (pchar3 "A")
        parse-B (pchar3 "B")
        parse-A-else-B (or-p2 'parse-A 'parse-B)
        AZZ (chop "AZZ")
        BZZ (chop "BZZ")
        CZZ (chop "CZZ"))
    (check
      (isa '+PSuc (parse-A-else-B AZZ))
      (= "A" (get (parse-A-else-B AZZ) 'Val))
      (= '("Z" "Z") (get (parse-A-else-B AZZ) 'RestInp))
      (isa '+PSuc (parse-A-else-B BZZ))
      (= "B" (get (parse-A-else-B BZZ) 'Val))
      (isa '+PFail (parse-A-else-B CZZ))
      (= "Unexpected 'C'" (get (parse-A-else-B CZZ) 'Err))
      )))

(deftest t-and-or ()
  (let (parse-A (pchar2 "A")
        parse-B (pchar2 "B")
        parse-C (pchar2 "C")
        parse-B-else-C (or-p 'parse-B 'parse-C)
        parse-A-then-B-or-C (and-p 'parse-A 'parse-B-else-C))
    (check
      (= '(("A" "B") . ("Z")) (parse-A-then-B-or-C (chop "ABZ")))
      (= '(("A" "C") . ("Z")) (parse-A-then-B-or-C (chop "ACZ")))
      (= '(NIL "Expecting 'A'. Got 'Q'" . ("Q" "B" "Z")) (parse-A-then-B-or-C (chop "QBZ")))
      (= '(NIL "Expecting 'C'. Got 'Q'" . ("Q" "Z")) (parse-A-then-B-or-C (chop "AQZ")))
      )))

(deftest t-and-or2 ()
  (let (parse-A (pchar3 "A")
        parse-B (pchar3 "B")
        parse-C (pchar3 "C")
        parse-B-else-C (or-p2 'parse-B 'parse-C)
        parse-A-then-B-or-C (and-p2 'parse-A 'parse-B-else-C))
    (check
      (= '("A" "B") (get (parse-A-then-B-or-C (chop "ABZ")) 'Val))
      (= '("Z") (get (parse-A-then-B-or-C (chop "ABZ")) 'RestInp))
      (= '("A" "C") (get (parse-A-then-B-or-C (chop "ACZ")) 'Val))
      (= '("Z") (get (parse-A-then-B-or-C (chop "ACZ")) 'RestInp))
      (= "Unexpected 'Q'" (get (parse-A-then-B-or-C (chop "QBZ")) 'Err))
      (= "Unexpected 'Q'" (get (parse-A-then-B-or-C (chop "AQZ")) 'Err))
      )))

(deftest t-choice ()
  (let (parse-A (pchar2 "A")
        parse-B (pchar2 "B")
        parse-C (pchar2 "C")
        parse-choice (choice 'parse-A 'parse-B 'parse-C))
    (check
      (= '(("A") . ("Z" "Z")) (parse-choice (chop "AZZ")))
      (= '(("B") . ("Z" "Z")) (parse-choice (chop "BZZ")))
      (= '(("C") . ("Z" "Z")) (parse-choice (chop "CZZ")))
      (= '(NIL "Expecting 'C'. Got 'Q'" . ("Q" "Z" "Z")) (parse-choice (chop "QZZ")))
      )))

(deftest t-choice2 ()
  (let (parse-A (pchar3 "A")
        parse-B (pchar3 "B")
        parse-C (pchar3 "C")
        parse-choice (choice2 'parse-A 'parse-B 'parse-C))
    (check
      (= '"A" (get (parse-choice (chop "AZZ")) 'Val))
      (= '"B" (get (parse-choice (chop "BZZ")) 'Val))
      (= '"C" (get (parse-choice (chop "CZZ")) 'Val))
      (= '"Unexpected 'Q'" (get (parse-choice (chop "QZZ")) 'Err))
      )))

(deftest t-any-of ()
  (let (parse-any-of (any-of "A" "B" "C"))
    (check
      (= '(("A") . ("Z" "Z")) (parse-any-of (chop "AZZ")))
      (= '(("B") . ("Z" "Z")) (parse-any-of (chop "BZZ")))
      (= '(("C") . ("Z" "Z")) (parse-any-of (chop "CZZ")))
      (= '(NIL "Expecting 'C'. Got 'Q'" . ("Q" "Z" "Z")) (parse-any-of (chop "QZZ")))
      (= '(("a") . ("B" "C")) (parse-lowc (chop "aBC")))
      (= '(NIL "Expecting 'z'. Got 'A'" . ("A" "B" "C")) (parse-lowc (chop "ABC")))
      (= '(("A") . ("B" "C")) (parse-uppc (chop "ABC")))
      (= '(NIL "Expecting 'Z'. Got 'a'" . ("a" "B" "C")) (parse-uppc (chop "aBC")))
      (= '(("1") . ("B" "C")) (parse-digit (chop "1BC")))
      (= '(("9") . ("B" "C")) (parse-digit (chop "9BC")))
      (= '(NIL "Expecting '9'. Got '|'" . ("|" "B" "C")) (parse-digit (chop "|BC")))
      )))

(deftest t-any-of2 ()
  (let (parse-any-of (any-of2 "A" "B" "C"))
    (check
      (= "A" (get (parse-any-of (chop "AZZ")) 'Val))
      (= "B" (get (parse-any-of (chop "BZZ")) 'Val))
      (= "C" (get (parse-any-of (chop "CZZ")) 'Val))
      (= "a" (get (parse-lowc2 (chop "aBC")) 'Val))
      (= "9" (get (parse-digit2 (chop "9BC")) 'Val))
      )))

(deftest t-all-of ()
  (let (parse-abc (pstring "ABC"))
    (check
      (= '(("A" "B" "C") . ("D" "E")) (parse-abc (chop "ABCDE")))
      )))

(deftest t-mapping ()
  (check
    (= '(("1" "2" "3") . ("C")) (parse3digits (chop "123C")))
    (= '(NIL "Expecting '9'. Got 'B'" . ("B" "C")) (parse3digits (chop "12BC")))
    (= '(("123") . ("C")) (parse3digits-as-str (chop "123C")))
    (= '((123) . ("C")) (parse3digits-as-int (chop "123C")))
    (= '(("ABC") . ("D" "E")) ((pstring2 "ABC") (chop "ABCDE")))
    (= '(NIL "Expecting 'B'. Got '|'" . ("|" "C" "D" "E")) ((pstring2 "ABC") (chop "A|CDE")))
    (= '(NIL "Expecting 'C'. Got '|'" . ("|" "D" "E")) ((pstring2 "ABC") (chop "AB|DE")))
    ))

(deftest t-mapping2 ()
  (check
    (= "123" (get (parse3digits-as-str2 (chop "123C")) 'Val))
    (= 123 (get (parse3digits-as-int2 (chop "123C")) 'Val))
    (= "ABC" (get ((pstring4 "ABC") (chop "ABCDE")) 'Val))
    ))

(deftest t-many-1 ()
  (let many-a (many (pchar2 "A"))
    (check
      (= '(("A") . ("B" "C" "D")) (many-a (chop "ABCD")))
      (= '(("A" "A") . ("C" "D")) (many-a (chop "AACD")))
      (= '(("A" "A" "A") . ("D")) (many-a (chop "AAAD")))
      (= '(() . ("|" "B" "C" "D")) (many-a (chop "|BCD")))
      )))

(deftest t-many-12 ()
  (let many-a (many2 (pchar3 "A"))
    (check
      (= '("A") (get (many-a (chop "ABCD")) 'Val))
      (= '("A" "A") (get (many-a (chop "AACD")) 'Val))
      (= '("A" "A" "A") (get (many-a (chop "AAAD")) 'Val))
      (= '() (get (many-a (chop "|BCD")) 'Val))
      )))

(deftest t-many-2 ()
  (let many-ab (many (pstring2 "AB"))
    (check
      (= '(("AB") . ("C" "D")) (many-ab (chop "ABCD")))
      (= '(("AB" "AB") . ("C" "D")) (many-ab (chop "ABABCD")))
      (= '(() . ("Z" "C" "D")) (many-ab (chop "ZCD")))
      (= '(() . ("A" "Z" "C" "D")) (many-ab (chop "AZCD")))
      )))

(deftest t-many-22 ()
  (let many-ab (many2 (pstring4 "AB"))
    (check
      (= '("AB") (get (many-ab (chop "ABCD")) 'Val))
      (= '("AB" "AB") (get (many-ab (chop "ABABCD")) 'Val))
      (= '() (get (many-ab (chop "ZCD")) 'Val))
      (= '() (get (many-ab (chop "AZCD")) 'Val))
      )))

(deftest t-many-3 ()
  (let many-ws (many 'parse-ws)
    (check
      (= '(() . ("A" "B" "C")) (many-ws (chop "ABC")))
      (= '((" ") . ("A" "B" "C")) (many-ws (chop " ABC")))
      (= '(("\t") . ("A" "B" "C")) (many-ws (chop "\tABC")))
      (= '(("\n") . ("A" "B" "C")) (many-ws (chop "\nABC")))
      (= '(("\r") . ("A" "B" "C")) (many-ws (chop "\rABC")))
      )))

(deftest t-many-32 ()
  (let many-ws (many2 'parse-ws2)
    (check
      (= '() (get (many-ws (chop "ABC")) 'Val))
      (= '(" ") (get (many-ws (chop " ABC")) 'Val))
      (= '("\t") (get (many-ws (chop "\tABC")) 'Val))
      (= '("\n") (get (many-ws (chop "\nABC")) 'Val))
      (= '("\r") (get (many-ws (chop "\rABC")) 'Val))
      )))

(deftest t-many-4 ()
  (let m-digit+ (many+ 'parse-digit)
    (check
      (= '(("1") . ("A" "B" "C")) (m-digit+ (chop "1ABC")))
      (= '(("1" "2") . ("B" "C")) (m-digit+ (chop "12BC")))
      (= '(("1" "2" "3") . ("C")) (m-digit+ (chop "123C")))
      (= '(("1" "2" "3" "4") . ()) (m-digit+ (chop "1234")))
      (= '(NIL "Expecting '9'. Got 'A'" . ("A" "B" "C")) (m-digit+ (chop "ABC")))
      )))

(deftest t-many-42 ()
  (let m-digit+ (many2+ 'parse-digit2)
    (check
      (= '("1") (get (m-digit+ (chop "1ABC")) 'Val))
      (= '("1" "2") (get (m-digit+ (chop "12BC")) 'Val))
      (= '("1" "2" "3") (get (m-digit+ (chop "123C")) 'Val))
      (= '("1" "2" "3" "4") (get (m-digit+ (chop "1234")) 'Val))
      (= "Unexpected 'A'" (get (m-digit+ (chop "ABC")) 'Err))
      )))

(deftest t-many-5 ()
  (check
    (= '((1) . ("A" "B" "C")) (pint (chop "1ABC")))
    (= '((12) . ("B" "C")) (pint (chop "12BC")))
    (= '((123) . ("C")) (pint (chop "123C")))
    (= '((1234) . ()) (pint (chop "1234")))
    (= '(NIL "Expecting '9'. Got 'A'" . ("A" "B" "C")) (pint (chop "ABC")))
    ))

(deftest t-many-52 ()
  (check
    (= '1 (get (pint3 (chop "1ABC")) 'Val))
    (= '12 (get (pint3 (chop "12BC")) 'Val))
    (= '123 (get (pint3 (chop "123C")) 'Val))
    (= '1234 (get (pint3 (chop "1234")) 'Val))
    (= "Unexpected 'A'" (get (pint3 (chop "ABC")) 'Err))
    ))

(deftest t-opt ()
  (let digit-then-comma (sequence 'parse-digit (opt (pchar2 ",")))
    (check
      (= '(("1" ",") . NIL) (digit-then-comma (chop "1,")))
      (= '(("1" NIL) . NIL) (digit-then-comma (chop "1")))
      (= '((123) . ("C")) (pint2 (chop "123C")))
      (= '((-123) . ("C")) (pint2 (chop "-123C")))
      )))

(deftest t-opt2 ()
  (let digit-then-comma (sequence2 'parse-digit2 (opt2 (pchar3 ",")))
    (check
      (= '("1" ",") (get (digit-then-comma (chop "1,")) 'Val))
      (= '("1" NIL) (get (! digit-then-comma (chop "1")) 'Val))
      (= '123 (get (! pint4 (chop "123C")) 'Val))
      (= '-123 (get (pint4 (chop "-123C")) 'Val))
      )))

(deftest t-drop ()
  (let (ws (map-p 'pack (many+ 'parse-ws))
        ab (pstring2 "AB")
        cd (pstring2 "CD")
        parser (and-p (and-p-drop-right 'ab 'ws) 'cd))
    (check
      (= '(("AB" "CD") . ("F")) (parser (chop "AB \tCDF")))
      )))

(deftest t-between ()
  (let (pquote (pchar2 "'")
        quoted-int (between pquote pint pquote))
    (check
      (= '((1234) . NIL) (quoted-int (chop "'1234'")))
      (= '(NIL "Expecting '''. Got '1'" . ("1" "2" "3" "4")) (quoted-int (chop "1234")))
      )))

(deftest t-sep-by ()
  (let (comma (pchar2 ",")
        digit (sep-by parse-digit comma)
        digit+ (sep-by+ parse-digit comma))
    (check
      (= '(("1") . (";")) (digit+ (chop "1;")))
      (= '(("1" "2") . (";")) (digit+ (chop "1,2;")))
      (= '(("1" "2" "3") . (";")) (digit+ (chop "1,2,3;")))
      (= '(NIL "Expecting '9'. Got 'Z'" . ("Z" ";")) (digit+ (chop "Z;")))
      (= '(("1") . (";")) (digit (chop "1;")))
      (= '(("1" "2") . (";")) (digit (chop "1,2;")))
      (= '(("1" "2" "3") . (";")) (digit (chop "1,2,3;")))
      (= '((NIL) . ("Z" ";")) (digit (chop "Z;")))
      )))

(deftest t-parser ()
  (combine-results
    (t-pchar)
    (t-pchar2)
    (t-pchar3)
    (t-and-p)
    (t-and-p2)
    (t-or-p)
    (t-or-p2)
    (t-and-or)
    (t-and-or2)
    (t-choice)
    (t-choice2)
    (t-any-of)
    (t-any-of2)
    (t-all-of)
    (t-mapping)
    (t-mapping2)
    (t-many-1)
    (t-many-12)
    (t-many-2)
    (t-many-22)
    (t-many-3)
    (t-many-32)
    (t-many-4)
    (t-many-42)
    (t-many-5)
    (t-many-52)
    (t-opt)
    (t-opt2)
    (t-drop)
    (t-between)
    (t-sep-by)
    ))

(t-parser)

