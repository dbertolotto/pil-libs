(load "../../lib/string.l"
      "../../lib/util.l")
(symbols '(pico string util))

(de decode-char (C1 C2)
  (char (hex (pack C1 C2))))

(de decode-param (S)
  (pack
    (make
      (for (L (chop S) L)
        (let (C (pop 'L))
          (link
            (case C
              ("%" (decode-char (pop 'L) (pop 'L)))
              ("+" " ")
              (T C))))))))

(de parse-param (S)
  (let (Pair (splits S "="))
    (cons (intern (lowc (car Pair)))
          (decode-param (cadr Pair)))))

(de parse-params (S)
  (mapcar 'parse-param (splits S "&")))

(de parse-url (S)
  (let (Parts (filter nnil? (splits S " "))
        Url (splits (cadr Parts) "?"))
    (list (intern (uppc (car Parts)))
          (lowc (car Url))
          (parse-params (cadr Url))
          (caddr Parts))))

(de get-header (Lines)
  (make
    (while (pop 'Lines)
      (let (L (mapcar trims (splits @ ":")))
        (when L
          (link (cons (intern (car L)) (cadr L))))))))

(de get-content-params (Header Lines)
  (let (Length (format (cdr (assoc 'content-length Header))))
    (when Length
      (parse-params (pack (head Length (chop (fish atom Lines))))))))

(de log @
  (pass 'prinl (stamp) " | " *Pid " | "))

(de server (Request-handler PortN)
  (let (Port (port PortN))
    (log "Server listening on port " PortN)
    (loop
      (setq Sock (listen Port))
      (NIL (fork) (child-handler Request-handler Port))
      (close Sock))))

(de server2 (Request-handler Port-num)
  (let (Port (port Port-num))
    (log "Server listening on port " Port-num)
    (loop
      (task (listen Port)
        (in (setq Sock @)
          (if (till)
            (out Sock (Request-handler @)
            (task Sock)
            (close Sock))))))))

(de server3 (Port Request-Handler)
  (let (P (port Port))
    (log "Server listening on port " Port)
    (loop
      (setq Sock (listen P))
      (NIL (fork) (close P))
      (close Sock)))
    # we are in the child here
    (log "Client connected from " *Adr)
    (in Sock
      (until (eof)
        #(make (link (line T)))
        #(make (while (poll Sock) (link (line T))))
        (make (while (line T) (link @)))
        )
      (mapc 'log @)
      (close Sock))
    (log "Client disconnected")
    (bye))

(de server4 (Port)
  (task (port Port)
    (when (listen @)
      (task @
        Sock @
         (in Sock
           (make (while (poll Sock) (link (line T))))
             (mapc prinl @)
             #(out Sock (eval @))
             (task Sock)
             (close Sock) ) ) ) ) )

(de echo-request-handler (L)
  L)

(de child-handler (Request-handler Port)
  (close Port)
  (log "Client connected from " *Adr)
  (let (Lines (in Sock
                #(make (while (line T) (link @))))
                (make (while (poll Sock) (link (line T)))))
                #(make (until (eof) (link (line T)))))
                #(make (while (char) (link @))))
                #(till 4096))
        Response (Request-handler Lines))
    (out Sock
      (prinl Response)))
  (close Sock)
  (log "Client disconnected")
  (bye))

(de http-request-handler (Lines)
  (mapc prinl Lines)
  (let (Url-line (pop 'Lines)
        Url (parse-url Url-line)
        Type (car Url)
        Path (cadr Url)
        Url-params (caddr Url)
        Version (cadddr Url)
        Header (get-header Lines)
        Params (append Url-params
                       (get-content-params Header Lines))
        Response-body (hello-request-handler Type Path Header Params)
        Response (response Version 200 'OK '((content-type . "text/html; charset=utf-8")) Response-body))
    (log "URL: " Url-line)
    (log "Type: " Type)
    (log "Path: " Path)
    (log "URL-params: " Url-params)
    (log "Version: " Version)
    (for P Header
      (log "Header: " (car P) ": " (cdr P)))
    (for P Params
      (log "Params: " (car P) ": " (cdr P)))
    (prinl Response-Body)
    (prinl Response)
    Response))

(de hello-request-handler (Type Path Header Params)
  (if (= Path "/greeting")
    (let (Name (assoc 'name Params))
      (if Name
        (text "<html>Nice to meet you, @1!</html>" (cdr Name))
        "<form>What is your name?<input name='name' /></form>"))
    "<html>Sorry... I don't know that page.</html>"))

(de response (Version Status Message Header Body)
  (pack Version " " Status " " Message "\n"
        (mapcar '((P) (pack (car P) ": " (cdr P) "\n")) Header)
        "\n"
        Body))

#(server2 http-request-handler 8080)
#(bye)
